<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reads Archive on 颢阳's Blog</title><link>https://blog.peterchen.xyz/reads/</link><description>Recent content in Reads Archive on 颢阳's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>颢阳</copyright><lastBuildDate>Sun, 14 Feb 2021 13:38:33 -0600</lastBuildDate><atom:link href="https://blog.peterchen.xyz/reads/index.xml" rel="self" type="application/rss+xml"/><item><title>Cpp Primer Chapter 5</title><link>https://blog.peterchen.xyz/reads/cpp-primer-c5/</link><pubDate>Tue, 22 Jun 2021 16:54:08 -0500</pubDate><guid>https://blog.peterchen.xyz/reads/cpp-primer-c5/</guid><description>This chapter looks in detail at the statements supported by C++. Statements are executed sequentially. Except for the simplest programs, sequential execution is inadequate. Therefore, C++ also defines a set of flow-of-control statements that allow more complicated execution paths.
Simple Statements Null Statements The simplest statement is the empty statement, also known as a null statement. A null statement is a single semicolon: ;. A null statement is useful where the language requires a statement but the program’s logic does not.</description></item><item><title>Cpp Primer Chapter 4</title><link>https://blog.peterchen.xyz/reads/cpp-primer-ch4/</link><pubDate>Tue, 08 Jun 2021 11:16:24 -0500</pubDate><guid>https://blog.peterchen.xyz/reads/cpp-primer-ch4/</guid><description>This chapter talks about expression, which is composed of one or more operands and yields result when it is evaluated. The simplest form of an expression is a single literal or variable. The result of such an expression is the value of the variable or literal. More complicated expressions are formed from an operator and one or more operands.
Fundamentals Precedence and Associativity Operands of operators with higher precedence group more tightly than operands of operators at lower precedence.</description></item><item><title>Cpp Primer Chapter 3</title><link>https://blog.peterchen.xyz/reads/cpp-primer-ch3/</link><pubDate>Sun, 30 May 2021 10:14:07 -0500</pubDate><guid>https://blog.peterchen.xyz/reads/cpp-primer-ch3/</guid><description>Namespace using Declarations A using declaration lets us use a name from a namespace without qualifying the name with a namespace_name::prefix. A using declaration has the form:
using namespace::name;
For example:
#include &amp;lt;iostream&amp;gt;using std::cin; int main() { int i; cin &amp;gt;&amp;gt; i; // ok: cin is a synonym for std::cin cout &amp;lt;&amp;lt; i; // error: no using declaration std::cout &amp;lt;&amp;lt; i; // ok return 0; } Code inside headers ordinarily should not use using declarations.</description></item><item><title>Cpp Primer Chapter 2</title><link>https://blog.peterchen.xyz/reads/cpp-primer-ch2/</link><pubDate>Wed, 26 May 2021 10:08:12 -0500</pubDate><guid>https://blog.peterchen.xyz/reads/cpp-primer-ch2/</guid><description>C++ language specifics Python check types at run time, whereas C++ is statically typed language — type-check is done at compile time. As a consequence, the compiler must know the type of every name used in the program.
Primitive Buit-in Types C++ defines a set of primitive types that include the arithmetic types and a special type named void. The arithmetic types represent characters, integers, boolean values, and floating-point numbers. The void type has no associated values and can be used in only a few circumstances, most commonly as the return type for functions that do not return a value.</description></item><item><title>Cpp Primer Chapter 1</title><link>https://blog.peterchen.xyz/reads/cpp-primer-ch1/</link><pubDate>Mon, 24 May 2021 21:36:54 -0500</pubDate><guid>https://blog.peterchen.xyz/reads/cpp-primer-ch1/</guid><description>Starting from today, I will read and write notes for C++ primer. I will only write notes that I think that is important, so not all the contents will be covered.
Design a bookstore Our store keeps a file of transactions, each of which records the sale of one or more copies of a single book. Each transaction contains three data elements:
0-201-70353-X 4 24.99 The first element is an ISBN (International Standard Book Number, a unique book identifier), the second is the number of copies sold, and the last is the price at which each of these copies was sold.</description></item></channel></rss>